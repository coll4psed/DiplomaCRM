@page "/clients"

@inject IDbContextFactory<DiplomaCRMContext> ContextFactory
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<PageTitle>Клиенты</PageTitle>

<AuthorizeView Context="User">
    <Authorized>
        @if (User.User.IsInRole("1") || User.User.IsInRole("3"))
        {
            <MudButton Class="my-10" StartIcon="@Icons.Filled.Add" Variant="Variant.Filled" Color="Color.Success" OnClick="AddClient">
                Добавить клиента
            </MudButton>
        }

        <MudPaper Outlined="true" Class="@(User.User.IsInRole("1") || User.User.IsInRole("3") ? "" : "mt-16")">
            <MudTable Hover="true" Items="@clients" Filter="new Func<Client, bool>(FilterFunc1)"
                      @bind-SelectedItem="selectedItem" AllowUnsorted="true" Loading="@_loading" LoadingProgressColor="Color.Info"
                      OnRowClick="NavigateToProfile" RowClassFunc="@SelectedRowClassFunc" T="Client">
                <ColGroup>
                    <col style="width: 5%" />
                    <col style="width: 15%" />
                    <col style="width: 15%" />
                    <col style="width: 15%" />
                    <col style="width: 50%" />
                    <col style="width: 10%" />
                </ColGroup>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Клиенты</MudText>
                    <MudSpacer />
                    <MudTextField Immediate="true" @bind-Value="searchString1" Placeholder="Поиск" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Client, object>(c => c.ClientId)">
                            №
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Client, object>(c => c.ClientName)">
                            Наименование
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Client, object>(c => c.ClientTypeNavigation.ClientTypeValue)">
                            Тип клиента
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Телефон</MudTh>
                    <MudTh>Адрес</MudTh>
                    <MudTh>Менеджер</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="№">@context.ClientId</MudTd>
                    <MudTd DataLabel="Наименование">@context.ClientName</MudTd>
                    <MudTd DataLabel="Тип клиента">@context.ClientTypeNavigation.ClientTypeValue</MudTd>
                    <MudTd DataLabel="Телефон">@context.ClientPhone</MudTd>
                    <MudTd DataLabel="Адрес">@context.ClientAddress</MudTd>
                    @if (context.ClientEmployee != null)
                    {
                        <MudTd DataLabel="Менеджер">
                            @context.ClientEmployee?.FullName
                        </MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="Менеджер">
                            Отсутствует
                        </MudTd>
                    }
                </RowTemplate>
                <PagerContent>
                    <MudTablePager InfoFormat="@infoFormat" RowsPerPageString="Строк на странице:" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </Authorized>
</AuthorizeView>



@code {
    private Client selectedItem = null;
    private string searchString1 = "";
    private bool _loading;
    private string infoFormat = "{first_item} - {last_item} из {all_items}";

    private IEnumerable<Client> clients = new List<Client>();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        using (var ctx = ContextFactory.CreateDbContext())
        {
            clients = await ctx.Clients
            .Include(c => c.ClientTypeNavigation)
            .Include(c => c.ClientEmployee)
            .ToListAsync();
        }
        _loading = false;
    }

    private bool FilterFunc1(Client client) => FilterFunc(client, searchString1);

    private bool FilterFunc(Client client, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (client.ClientName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void NavigateToProfile(TableRowClickEventArgs<Client> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"clientProfile/{selectedItem.ClientId}");
    }

    private string SelectedRowClassFunc(Client client, int rowNumber)
    {
        return rowNumber.ToString();
    }

    private void AddClient()
    {
        NavigationManager.NavigateTo($"/addEditClient/");
    }
}